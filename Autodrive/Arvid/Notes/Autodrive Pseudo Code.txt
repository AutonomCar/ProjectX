Autodrive pseudo code, decision making 2017-05-18

#include "Communication"; //Byt ut interface
#include "Navigation";


private int mode;
final int FOLLOW_ROAD = 1; 	// Follow the road using ImageProcessing
final int AVOID = 2;		// Pre coded route to avoid object op road
final int FOLLOW_CAR = 3;	// Follow car at set distance.
final int CROSSING = 4;		// Manage an intersection
final int JUST_DRIVE = 5;	// Drive forward, turn when ecountering obstacles (roomba style)
final int ERROR = 6;		// Something is wrong. Stop Car Immediatly.

final int FAST_SPEED = 255;
final int NORMAL_SPEED = 200;
final int SLOW_SPEED = 100;
final int STOP = 0;

public int next;
public int last;


main(){
	while(1){
		updateMode();
		run();		
	}
}



void updateMode(){
	
	//Object within 100cm in front of car
	if( (interface.getSonarFront()<100) && (mode!=FOLLOW_CAR) && (mode == FOLLOWING_ROAD) ) // Stop if object appears between the cars in FOLLOWING_CAR
		mode = AVOID;
	
	//Paralell line under car. When not in AVOID procedure.
	else if(interface.getIrFrontLeft() && interface.getIrFrontRight() && (mode!=AVOID))
		mode = CROSSING;
	
	//If there are lanes to follow
	else if(foundRightLine() || foundLeftLine())
		mode = FOLLOWING_ROAD;		
	
	//If there is no input to make a decision, drive until some input is aquired.
	else
		mode = JUST_DRIVE;
}


public void updateMode(int m){
	mode = m;
}

void private run(){

	switch(mode){
		case FOLLOW_ROAD:
			ImageProcessing.run();
		break;
		
		case AVOID:
			avoid();
		break;

		case FOLLOW_CAR:
			followCar();
		break;
		
		case CROSSING:
			crossing();		<<<FIX
		break;
		
		case JUST_DRIVE:
			justDrive();
		break;

		case ERROR:
			cout << "ERROR: mode (run) " << endl;
		break;
		
		default:
			cout << "No mode" << endl;
	}

}



void followCar(){
	if(interface.getSonarFront()>110)	//Accelerate if to far
		interface.setSpeed(interface.getSpeed()+0.1)
	else if(interface.getSonarFront()<90)	//Slow down if to close
		interface.setSpeed(interface.getSpeed()-0.1)
//Problems:
//1. Setting up the scenario where one car can follow another
//2. Avoiding objects. The car in front have to tell the car in the back?
}

void avoid(){ 					<<< HARD CODED: FIX!! not good, use overtake?
	interface.setSpeed(SLOW_SPEED);
	
	interface.setAngle(-0.5);
	int wait = 0;
	while(interface.getSonarFront()<100){	//wait until the object is not in front anymore.
		wait++;
		if(leftLineFound){
			interface.setSpeed(0);
			mode = ERROR;
		}
	} 
	int return = wait;
	interface.setAngle(0.5);
	while(( wait>0) && (interface.getSonarFront()>100) ){ //straighten out
		wait--;
	}
	interface.setAngle(0);	
	
	mode = FOLLOW_ROAD; 			// Use standard road following precedure until obstacle is passed.
	while(interface.getSonarSide()<30cm){
		ImageProcessor.run();		<<<<FIX
	}
	
	
	interface.setAngle(0.5);
	while(return>0){ 			//Turn until returned to original lane.
		return--;
		wait++;
	}
	interface.setAngle(-0.5);
	while( !foundRightLine || (wait>0) ){ 	//straighten out
		wait--;
	}
	interface.setAngle(0);	

}

void crossing(){
	if( OTHER CAR IS IN CROSSING){
		COORDINATE
		.
		.
		.
	}
	else
		mode = JUST_DRIVE;
	
}


void justDrive(){
	setSpeed(SLOW_SPEED);
	if(getSonarFront()<100){
		setAngle(1);
	}
	else if(!getSonar()<100){
	setAngle(0);
	}
	
	if(interface.getSonarFront()<50){
		interface.setSpeed(STOP);
		setAngle(-1);
		setSpeed(-100);
		wait(20);
		setSpeed(0);
		setAngle(0);		
	}
	
}



