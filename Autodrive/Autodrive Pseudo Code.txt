Autodrive pseudo code, decision making 2017-05-18


private int mode;
final int FOLLOW_ROAD = 1;
final int AVOID = 2;
final int FOLLOW_CAR = 3;
final int CROSSING = 4;
final int JUST_DRIVE = 5;
final int ERROR = 6;

final int FAST_SPEED = 255;
final int NORMAL_SPEED = 200;
final int SLOW_SPEED = 100;

public Interface interface;

main(){
	while(1){
		interface = new Interface();
		updateMode();
		run();		
	}
}



void updateMode(){
	
	//Object within 100cm in front of car
	if( (interface.getSonarFront()<100) && (mode!=FOLLOW_CAR) )
		mode = AVOID;
	
	//Paralell line under car. When not in AVOID procedure.
	else if(interface.getIrFrontLeft() && interface.getIrFrontRight() && (mode!=AVOID))
		mode = CROSSING;
	
	//If there are lanes to follow
	else if(foundRightLine() || foundLeftLine())
		mode = FOLLOWING_ROAD;		
	
	//If there is no input to make a decision, drive until some input is aquired.
	else
		mode = JUST_DRIVE;
}


public void updateMode(int m){
	mode = m;
}

void private run(){

	switch(mode){
		case FOLLOW_ROAD:
			ImageProcessing.run();
		break;
		
		case AVOID:
			avoid();
		break;

		case FOLLOW_CAR:
			followCar();
		break;
		
		case CROSSING:
			crossing();		<<<FIX
		break;
		
		case JUST_DRIVE:
			interface.setSpeed(NORMAL_SPEED);
		break;

		case ERROR:
			cout << "Mode Error!" << endl;
		break;
		
		default:
			cout << "No mode operating" << endl;
	}

}



void followCar(){
	if(interface.getSonarFront()>110)	//Accelerate if to far
		interface.setSpeed(interface.getSpeed()+0.1)
	else if(interface.getSonarFront()<90)	//Slow down if to close
		interface.setSpeed(interface.getSpeed()-0.1)
//Problems:
//1. Setting up the scenario where one car can follow another
//2. Avoiding objects. The car in front have to tell the car in the back?
}

void avoid(){ 					<<< HARD CODED: FIX!!
	interface.setSpeed(SLOW_SPEED);
	
	interface.setAngle(-0.5);
	int wait = 0;
	while(interface.getSonarFront()<100){	//wait until the object is not in front anymore.
		wait++;
		if(leftLineFound){
			interface.setSpeed(0);
			mode = ERROR;
		}
	} 
	int return = wait;
	interface.setAngle(0.5);
	while(( wait>0) && (interface.getSonarFront()>100) ){ //straighten out
		wait--;
	}
	interface.setAngle(0);	
	
	mode = FOLLOW_ROAD; 			// Use standard road following precedure until obstacle is passed.
	while(interface.getSonarSide()<30cm){
		ImageProcessor.run();		<<<<FIX
	}
	
	
	interface.setAngle(0.5);
	while(return>0){ 			//Turn until returned to original lane.
		return--;
		wait++;
	}
	interface.setAngle(-0.5);
	while( !foundRightLine || (wait>0) ){ 	//straighten out
		wait--;
	}
	interface.setAngle(0);	

}

void crossing(){
	//IF OTHER CAR IS IN CROSSING
		COORDINATE
	else
		mode = JUST_DRIVE;
	
}


